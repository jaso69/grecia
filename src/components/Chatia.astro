---
// ChatIA.astro
---

<div class="max-w-4xl mx-auto bg-white rounded-lg shadow-lg overflow-hidden mt-5 opacity-80">
  <!-- Header del Chat -->
  <div class="bg-gradient-to-r from-blue-600 to-purple-600 text-white p-4">
    <div class="flex items-center justify-between">
      <div class="flex items-center space-x-3">
        <div class="w-10 h-10 rounded-full bg-white/20 flex items-center justify-center">
          <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
            <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
          </svg>
        </div>
        <div>
          <h2 class="text-lg font-semibold">Pixel Assistant</h2>
          <p class="text-sm text-white/80">En línea</p>
        </div>
      </div>
      <button
        id="clear-chat"
        class="bg-white/20 hover:bg-white/30 rounded-lg p-2 transition-colors duration-200"
        title="Limpiar conversación"
      >
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
        </svg>
      </button>
    </div>
  </div>

  <!-- Área de mensajes -->
  <div id="chat-messages" class="h-96 overflow-y-auto p-4 space-y-4 bg-gray-50">
    <!-- Los mensajes se generarán dinámicamente -->
  </div>

  <!-- Input para escribir mensajes -->
  <div class="border-t bg-white p-4">
    <div class="flex items-center space-x-3">
      <input
        type="text"
        id="message-input"
        placeholder="Escribe tu mensaje..."
        class="flex-1 border border-gray-300 rounded-full px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
      />
      <button
        id="send-button"
        class="bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-full p-2 hover:from-blue-700 hover:to-purple-700 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
      >
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
        </svg>
      </button>
    </div>
  </div>

  <!-- Indicador de escritura -->
  <div id="typing-indicator" class="hidden px-4 py-2 bg-gray-50 border-t">
    <div class="flex items-center space-x-2">
      <div class="w-6 h-6 rounded-full bg-gradient-to-r from-blue-500 to-purple-500 flex items-center justify-center text-white text-xs font-bold">
        IA
      </div>
      <div class="flex space-x-1">
        <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
        <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style="animation-delay: 0.1s"></div>
        <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style="animation-delay: 0.2s"></div>
      </div>
      <span class="text-sm text-gray-500">Escribiendo...</span>
    </div>
  </div>
</div>

<script>
  // Variables del chat
  const messagesContainer = document.getElementById('chat-messages');
  const messageInput = document.getElementById('message-input');
  const sendButton = document.getElementById('send-button');
  const clearButton = document.getElementById('clear-chat');
  const typingIndicator = document.getElementById('typing-indicator');

  // Variables para la API
  let controller = null;
  let currentAIMessageDiv = null;
  let conversationId = null;
  const url = 'https://grecia-backend.vercel.app/';

  // Función para agregar mensajes al chat
  function addMessage(message, isUser = false) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `flex items-start space-x-3 ${isUser ? 'flex-row-reverse space-x-reverse' : ''}`;

    const avatarColor = isUser ? 'bg-green-500' : 'bg-gradient-to-r from-blue-500 to-purple-500';
    const avatarText = isUser ? 'TU' : 'IA';
    const messageStyle = isUser
      ? 'bg-gradient-to-r from-blue-600 to-purple-600 text-white'
      : 'bg-white border shadow-sm';

    messageDiv.innerHTML = `
      <div class="w-8 h-8 rounded-full ${avatarColor} flex items-center justify-center text-white text-sm font-bold">
        ${avatarText}
      </div>
      <div class="flex-1 ${isUser ? 'text-right' : ''}">
        <div class="${messageStyle} rounded-lg p-3">
          <p class="${isUser ? 'text-white' : 'text-gray-800'}" data-message-content>${message}</p>
        </div>
        <p class="text-xs text-gray-500 mt-1">Ahora</p>
      </div>
    `;

    messagesContainer.appendChild(messageDiv);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;

    // Si es un mensaje de IA, guardamos la referencia para streaming
    if (!isUser) {
      currentAIMessageDiv = messageDiv.querySelector('[data-message-content]');
    }

    return messageDiv;
  }

  // Función para mostrar/ocultar indicador de escritura
  function showTypingIndicator() {
    typingIndicator.classList.remove('hidden');
  }

  function hideTypingIndicator() {
    typingIndicator.classList.add('hidden');
  }

  // Función para actualizar el mensaje de IA en tiempo real (streaming)
  function updateAIMessage(content) {
    if (currentAIMessageDiv) {
      currentAIMessageDiv.innerHTML = content;
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }
  }

  // Función principal para enviar mensaje a la API
  async function sendMessageToAPI(prompt) {
    const requestData = {
      prompt: prompt,
      stream: true,
      conversationId: conversationId
    };

    // Cancelar cualquier solicitud previa
    if (controller) {
      controller.abort();
    }
    controller = new AbortController();

    try {
      const response = await fetch(url, {
        method: 'POST',
        mode: 'cors',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify(requestData),
        signal: controller.signal
      });

      if (!response.ok) throw new Error('Error en la respuesta');

      // Procesamiento del stream
      const reader = response.body.getReader();
      const decoder = new TextDecoder();
      let partialData = '';
      let fullResponse = '';

      // Agregar mensaje vacío de IA para ir actualizando
      addMessage('', false);
      hideTypingIndicator();

      while (true) {
        const {done, value} = await reader.read();
        if (done) break;

        const chunk = decoder.decode(value, {stream: true});
        partialData += chunk;

        // Procesamos los chunks completos
        const lines = partialData.split('\n');
        partialData = lines.pop(); // Guardamos el último fragmento incompleto

        let newContent = '';
        for (const line of lines) {
          if (line.startsWith('data:') && line !== 'data: [DONE]') {
            try {
              const data = JSON.parse(line.substring(5));

              // Capturar el ID de conversación si se proporciona
              if (data.conversationId) {
                conversationId = data.conversationId;
                continue;
              }

              if (data.choices && data.choices[0].delta && data.choices[0].delta.content) {
                newContent += data.choices[0].delta.content;
              }
            } catch (e) {
              console.error('Error parsing stream data:', e);
            }
          }
        }

        if (newContent) {
          fullResponse += newContent;
          updateAIMessage(fullResponse);
        }
      }

      // Si no hay respuesta, mostrar mensaje de error
      if (!fullResponse) {
        updateAIMessage('No pude procesar tu consulta. Inténtalo de nuevo.');
      }

    } catch (error) {
      hideTypingIndicator();
      if (error.name !== 'AbortError') {
        console.error('Error:', error);
        // Agregar mensaje de error solo si no hay mensaje de IA pendiente
        if (!currentAIMessageDiv || currentAIMessageDiv.innerHTML === '') {
          addMessage('Error al conectar con el asistente. Inténtalo de nuevo.', false);
        } else {
          updateAIMessage('Error al obtener la respuesta. Inténtalo de nuevo.');
        }
      }
    } finally {
      controller = null;
      currentAIMessageDiv = null;
    }
  }

  // Función para enviar mensaje
  async function sendMessage() {
    const message = messageInput.value.trim();
    if (message.length < 1) return;

    // Agregar mensaje del usuario
    addMessage(message, true);
    messageInput.value = '';

    // Mostrar indicador de escritura
    showTypingIndicator();

    // Enviar a la API
    await sendMessageToAPI(message);
  }

  // Función para limpiar la conversación
  function clearConversation() {
    conversationId = null;
    messagesContainer.innerHTML = '';
    addMessage("Hello! I'm Pixel, quieres ser mi amigo?", false);
  }

  // Event listeners
  sendButton.addEventListener('click', async (event) => {
    event.preventDefault();
    await sendMessage();
  });

  clearButton.addEventListener('click', () => {
    clearConversation();
  });

  messageInput.addEventListener('keypress', async (e) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      await sendMessage();
    }
  });

  // Auto-focus en el input
  messageInput.focus();

  // Mensaje inicial
  document.addEventListener('DOMContentLoaded', () => {
    addMessage("Hello! I'm Pixel, quieres ser mi amigo?", false);
  });
</script>

<style>
  /* Animación personalizada para el scroll suave */
  #chat-messages {
    scroll-behavior: smooth;
  }

  /* Estilos adicionales para el input */
  #message-input:focus {
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }

  /* Animación para los mensajes */
  #chat-messages > div {
    animation: slideIn 0.3s ease-out;
  }

  @keyframes slideIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>
